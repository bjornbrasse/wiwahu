// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  // provider = "postgres"
  // url      = env("DATABASE_URL")
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Department {
  id                  String               @id @default(cuid())
  name                String
  organisation        Organisation         @relation(fields: [organisationId], references: [id])
  organisationId      String
  departmentEmployees DepartmentEmployee[]
}

model DepartmentEmployee {
  id           String     @id @default(cuid())
  department   Department @relation(fields: [departmentId], references: [id])
  departmentId String
  user         User       @relation(fields: [userId], references: [id])
  userId       String

  @@unique([departmentId, userId])
}

model Instruction {
  id                    String                 @id @default(cuid())
  createdAt             DateTime               @default(now())
  createdBy             User                   @relation(name: "InstructionCreatedBy", fields: [createdById], references: [id])
  createdById           String
  updatedAt             DateTime               @updatedAt
  instruction           String
  explanation           String?
  type                  String
  version               String
  warnings              String?
  instructionProcedures InstructionProcedure[]
}

model InstructionProcedure {
  id            String      @id @default(cuid())
  instruction   Instruction @relation(fields: [instructionId], references: [id])
  instructionId String
  procedure     Procedure   @relation(fields: [procedureId], references: [id])
  procedureId   String
}

model Note {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  createdBy   User     @relation(fields: [createdById], references: [id])
  createdById String
  updatedAt   DateTime @updatedAt
  note        String
}

model Organisation {
  id                    String                 @id @default(cuid())
  name                  String
  nameShort             String
  slug                  String                 @unique
  departments           Department[]
  organisationEmployees OrganisationEmployee[]
}

model OrganisationEmployee {
  id             String       @id @default(cuid())
  organisation   Organisation @relation(fields: [organisationId], references: [id])
  organisationId String
  user           User         @relation(fields: [userId], references: [id])
  userId         String

  @@unique([organisationId, userId])
}

model Procedure {
  id                    String                 @id @default(cuid())
  createdAt             DateTime               @default(now())
  createdBy             User                   @relation(fields: [createdById], references: [id])
  createdById           String
  updatedAt             DateTime               @updatedAt
  title                 String
  childProcedures       ProcedureParent[]      @relation("parentProcedure")
  parentProcedures      ProcedureParent[]      @relation("childProcedure")
  instructionProcedures InstructionProcedure[]
}

model ProcedureParent {
  id                String    @id @default(cuid())
  childProcedure    Procedure @relation(name: "childProcedure", fields: [childProcedureId], references: [id])
  childProcedureId  String
  parentProcedure   Procedure @relation(name: "parentProcedure", fields: [parentProcedureId], references: [id])
  parentProcedureId String
}

model User {
  id                    String                 @id @default(cuid())
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  role                  String
  firstName             String
  lastName              String
  initials              String?
  email                 String                 @unique
  credentials           UserCredentials?
  preferences           UserPreferences?
  instructions          Instruction[]          @relation(name: "InstructionCreatedBy")
  notesCreated          Note[]
  proceduresCreated     Procedure[]
  departmentEmployees   DepartmentEmployee[]
  organisationEmployees OrganisationEmployee[]
}

model UserCredentials {
  user                 User    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId               String  @unique
  passwordHash         String?
  passwordResetToken   String?
  emailValidationToken String?
}

model UserPreferences {
  user     User    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId   String  @unique
  darkMode Boolean @default(false)
}
