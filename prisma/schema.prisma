// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  // provider = "postgres"
  // url      = env("DATABASE_URL")
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Instruction {
  id                 String              @id @default(cuid())
  createdAt          DateTime            @default(now())
  createdBy          User                @relation(name: "InstructionCreatedBy", fields: [createdById], references: [id])
  createdById        String
  updatedAt          DateTime            @updatedAt
  instruction        String
  explanation        String?
  type               String
  version            String
  warnings           String?
  parentInstructions ParentInstruction[] @relation("childInstruction")
  childInstructions  ParentInstruction[] @relation("parentInstruction")
}

model ParentInstruction {
  id                  String      @id @default(cuid())
  parentInstruction   Instruction @relation(name: "parentInstruction", fields: [parentInstructionId], references: [id])
  parentInstructionId String
  childInstruction    Instruction @relation(name: "childInstruction", fields: [childInstructionId], references: [id])
  childInstructionId  String
}

model Note {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  createdBy   User     @relation(name: "NoteCreatedBy", fields: [createdById], references: [id])
  createdById String
  updatedAt   DateTime @updatedAt
  note        String
}

model User {
  id           String        @id @default(cuid())
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  role         String
  firstName    String
  lastName     String
  initials     String?
  email        String        @unique
  credentials  Credentials?
  preferences  Preferences?
  instructions Instruction[] @relation(name: "InstructionCreatedBy")
  notes        Note[]        @relation(name: "NoteCreatedBy")
}

model Credentials {
  user                 User    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId               String  @unique
  passwordHash         String?
  passwordResetToken   String?
  emailValidationToken String?
}

model Preferences {
  user     User    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId   String  @unique
  darkMode Boolean @default(false)
}
